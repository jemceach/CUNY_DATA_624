DATA 622: Exponential Smoothing
========================================================
author: Jeremy O'Brien & Juliann McEachern
date: 17 September 2019
autosize: true
incremental: true

```{r, echo = FALSE}
library(fpp2)
library(ggplot2)
```


What's exponential smoothing?
========================================================
* When making predictions, weight recent observations more than older observations
* Specifically, decrease weights geometrically / exponentially when moving backward
* Window function (a.k.a. apodization function or tapering function)
  + zero-valued outside of some chosen interval
  + normally symmetric around middle of interval
  + typically near maximum in the middle and tapering away from there
* Easily learned and applied (i.e. signal processing community in 1940's)


Agenda
========================================================
type: section
* Simple methods
* Trend methods
* Seasonal methods
* 
* 
* 


Simple methods
========================================================
Time series $y_1,y_2,\dots,y_T$.

**Random walk forecast**
$$
\begin{aligned}
  \hat{y}_{T+h|T} = y_T
\end{aligned}
$$

**Average forecast** 
$$
\begin{aligned}
   \hat{y}_{T+h|T} = \frac1T\sum_{t=1}^T y_t
\end{aligned}
$$

Consider a happy median that privileges recent information...


Simple exponential smoothing
========================================================
**Forecast equation**
$$
\begin{aligned}
   \hat{y}_{T+1|T} = \alpha y_T + \alpha(1-\alpha) y_{T-1} + \alpha(1-\alpha)^2 y_{T-2}+ \cdots
\end{aligned}
$$
where $0 \le \alpha \le1$

Weighted moving average with weights that decrease exponentially

$$
\small\begin{tabular}{lllll}
\toprule
& \multicolumn{4}{l}{Weights assigned to observations for:}\\
Observation  &   $\alpha = 0.2$   &   $\alpha = 0.4$  &   $\alpha = 0.6$  & $\alpha = 0.8$ \\
\midrule
$y_{T}$      & 0.2         & 0.4          & 0.6         & 0.8\\
$y_{T-1}$    & 0.16        & 0.24         & 0.24        & 0.16\\
$y_{T-2}$    & 0.128       & 0.144        & 0.096       & 0.032\\
$y_{T-3}$    & 0.1024      & 0.0864       & 0.0384      & 0.0064\\
$y_{T-4}$    & $(0.2)(0.8)^4$  & $(0.4)(0.6)^4$   & $(0.6)(0.4)^4$  & $(0.8)(0.2)^4$\\
$y_{T-5}$    & $(0.2)(0.8)^5$  & $(0.4)(0.6)^5$   & $(0.6)(0.4)^5$  & $(0.8)(0.2)^5$\\
\bottomrule
\end{tabular}
$$


Simple exponential smoothing
========================================================
**Component form: forecast equation**
$$
\begin{align*}
   \hat{y}_{t+h|t} = \ell_{t}
\end{align*}
$$

**Component form: smoothing equation**
$$
\begin{align*}
   \ell_{t} = \alpha y_{t} + (1 - \alpha)\ell_{t-1}
\end{align*}
$$

$\ell_t$ is level / smoothed value of series at time $t$

$\hat{y}_{t+1|t} = \alpha y_t + (1-\alpha) \hat{y}_{t|t-1}$  
Iterate for exponentially weighted moving average form


Simple exponential smoothing
========================================================
**Weighted average form**
$$
\begin{align*}
   \hat{y}{T+1}{T}=\sum_{j=0}^{T-1} \alpha(1-\alpha)^j y_{T-j}+(1-\alpha)^T \ell_{0}
\end{align*}
$$


Optimization
========================================================
To choose value for $\alpha$ and $\ell_0$, minimize SSE:
$$
\begin{aligned}
    \text{SSE}=\sum_{t=1}^T(y_t - \hat{y}_{t|t-1})^2.
\end{aligned}
$$

Unlike regression, no closed-form solution so use numerical optimization


Example: Oil production
========================================================

```{r ses, echo=TRUE, cache=TRUE}
oildata <- window(oil, start=1996)
fc <- ses(oildata, h=5)
autoplot(fc) +
  autolayer(fitted(fc), series="Fitted") +
  ylab("Oil (millions of tonnes)") + xlab("Year")
```


Trend methods: Holt's linear trend
========================================================
**Component form: forecast**
$$
\begin{align*}
   \hat{y}_{t+h|t} &= \ell_{t+h}b_{t}
\end{align*}
$$

**Component form: level**
$$
\begin{align*}
    \ell_{t} &= \alpha y_{t} + (1 - \alpha)(\ell_{t-1} + b_{t-1})
\end{align*}
$$

**Component form: trend**
$$
\begin{align*}
   b_{t} &= \beta^*(\ell_{t} - \ell_{t-1}) + (1 -\beta^*)b_{t-1}
\end{align*}
$$

* Two smoothing parameters $\alpha$ and $\beta^*$ $(0\le\alpha,\beta^*\le1)$  
* $\ell_t$ level: weighted average between $y_t$ and one-step ahead forecast for time $t$, $(\ell_{t-1} + b_{t-1} = \hat{y}_{t|t-1})$  
* $b_t$ slope: weighted average of $(\ell_{t} - \ell_{t-1})$ and $ b_{t-1}$, current and previous estimate of slope  
* Select $\alpha, \beta^*, \ell_0, b_0$ to minimise SSE


Example: Holt's method
========================================================

```{r, fig.height=3.6, echo=TRUE}
window(ausair, start=1990, end=2004) %>%
  holt(h=5, PI=FALSE) %>%
  autoplot()
```


Damped trend method
========================================================
**Component form**
$$
\begin{align*}
  \hat{y}_{t+h|t} &= \ell_{t} + (\phi+\phi^2 + \dots + \phi^{h})b_{t} \\
  \ell_{t} &= \alpha y_{t} + (1 - \alpha)(\ell_{t-1} + \phi b_{t-1})\\
  b_{t} &= \beta^*(\ell_{t} - \ell_{t-1}) + (1 -\beta^*)\phi b_{t-1}
\end{align*}
$$

* Damping parameter: $0<\phi<1$
* If $\phi=1$, identical to Holt's linear trend
* As $h\rightarrow\infty$, $\hat{y}_{T+h|T}\rightarrow \ell_T+\phi b_T/(1-\phi)$
* Short-run forecasts trended, long-run forecasts constant


Example: Air passengers
========================================================
```{r, echo=TRUE, fig.height=3.6}
window(ausair, start=1990, end=2004) %>%
  holt(damped=TRUE, h=5, PI=FALSE) %>%
  autoplot()
```


Seasonal methods: Holt-Winters additive method
========================================================
Holt's method extended to capture seasonality

**Component form**
$$
\begin{align*}
   \hat{y}_{t+h|t} &= \ell_{t} + hb _{t} + s_{t+h-m(k+1)} \\
   \ell_{t} &= \alpha(y_{t} - s_{t-m}) + (1 - \alpha)(\ell_{t-1} + b_{t-1})\\
   b_{t} &= \beta^*(\ell_{t} - \ell_{t-1}) + (1 - \beta^*)b_{t-1}\\
   s_{t} &= \gamma (y_{t}-\ell_{t-1}-b_{t-1}) + (1-\gamma)s_{t-m},
\end{align*}
$$

* $k$ is integer part of $(h-1)/m$, ensuring estimates from final year used in forecast
* Parameters: $0\le \alpha\le 1$, $0\le \beta^*\le 1$, $0\le \gamma\le 1-\alpha$ and $m$ for period of seasonality (e.g. $m=4$ for quarterly data)


Holt-Winters additive method
========================================================
* Seasonal component usually expressed as $s_{t} = \gamma^* (y_{t}-\ell_{t}) + (1-\gamma^*)s_{t-m}$
* Substitute for $\ell_t$: $s_{t} = \gamma^* (1-\alpha) (y_{t}-\ell_{t-1}-b_{t-1}) + [1-\gamma^*(1-\alpha)]s_{t-m}$
* Set $\gamma=\gamma^*(1-\alpha)$
* Usual parameter restriction is $0\le\gamma^*\le1$ or $0\le\gamma\le(1-\alpha)$


Holt-Winters multiplicative method
========================================================
When seasonal variations change in proportion to level of series

**Component form**
$$
\begin{align*}
   \hat{y}_{t+h|t} &= (\ell_{t} + hb_{t})s_{t+h-m(k+1)}\\
   \ell_{t} &= \alpha \frac{y_{t}}{s_{t-m}} + (1 - \alpha)(\ell_{t-1} + b_{t-1})\\
   b_{t} &= \beta^*(\ell_{t}-\ell_{t-1}) + (1 - \beta^*)b_{t-1}\\
   s_{t} &= \gamma \frac{y_{t}}{(\ell_{t-1} + b_{t-1})} + (1 - \gamma)s_{t-m}
\end{align*}
$$
  * $k$ is integer part of $(h-1)/m$
  * For additive method, $s_t$ is in absolute terms:  
  within each year $\sum_i s_i \approx 0$
  * For multiplicative method, $s_t$ is in relative terms:  
  within each year $\sum_i s_i \approx m$


Example: Visitor Nights
========================================================

```{r 7-HW, echo=TRUE}
aust <- window(austourists,start=2005)
fit1 <- hw(aust,seasonal="additive")
fit2 <- hw(aust,seasonal="multiplicative")
```

```{r, fig.height=3.2}
tmp <- cbind(Data=aust,
  "HW additive forecasts" = fit1[["mean"]],
  "HW multiplicative forecasts" = fit2[["mean"]])

autoplot(tmp) + xlab("Year") +
  ylab("International visitor night in Australia (millions)") +
  scale_color_manual(name="",
    values=c('#000000','#1b9e77','#d95f02'),
    breaks=c("Data","HW additive forecasts","HW multiplicative forecasts"))
```


Example: Vistor nights estimated components
========================================================

```{r fig-7-LevelTrendSeas}
addstates <- fit1$model$states[,1:3]
multstates <- fit2$model$states[,1:3]
colnames(addstates) <- colnames(multstates) <-
  c("level","slope","season")
p1 <- autoplot(addstates, facets=TRUE) + xlab("Year") +
  ylab("") + ggtitle("Additive states")
p2 <- autoplot(multstates, facets=TRUE) + xlab("Year") +
  ylab("") + ggtitle("Multiplicative states")
gridExtra::grid.arrange(p1,p2,ncol=2)
```


Holt-Winters damped method
========================================================
$$
\begin{align*}
   \hat{y}_{t+h|t} &= [\ell_{t} + (\phi+\phi^2 + \dots + \phi^{h})b_{t}]s_{t+h-m(k+1)} \\
   \ell_{t} &= \alpha(y_{t} / s_{t-m}) + (1 - \alpha)(\ell_{t-1} + \phi b_{t-1})\\
   b_{t} &= \beta^*(\ell_{t} - \ell_{t-1}) + (1 - \beta^*)\phi b_{t-1}       \\
   s_{t} &= \gamma \frac{y_{t}}{(\ell_{t-1} + \phi b_{t-1})} + (1 - \gamma)s_{t-m}
\end{align*}
$$

Often single most accurate forecasting method for seasonal data


Sources
========================================================

1. https://github.com/robjhyndman/ETC3550Slides/raw/master/7-exponentialsmoothing.pdf
2. https://en.wikipedia.org/wiki/Exponential_smoothing
3. https://machinelearningmastery.com/exponential-smoothing-for-time-series-forecasting-in-python/
3. 
